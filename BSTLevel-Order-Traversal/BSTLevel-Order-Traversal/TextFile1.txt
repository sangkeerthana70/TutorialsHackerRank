a-Like Singly Linked list the only way to traverse the next node is by moving the pointer 
from the root node to the child node(preferably left child).
b- To do this we need more than one pointer.  As we visit a node we can store the memory address
of the node and address all its children in a queue so that we can visit them later.
c-Once a node is in the queue it is called a discovered node whose address is known to us but we 
have not visited it yet.

Here is the funda behind it
Root is the first node
	* Step-1 Enqueue the root node by storing its memory address in the queue
	* Step-2 Now we have atleast one discovered node in the queue i.e the queue 
	  is not empty we can take out a node(dequeue) from the front visit it(visiting it means
	  printing the value of that node) and then enqueue its children.
	* Keep repeating this until all the nodes in the queue is empty


	Time Complexity
	 The time taken by this algorithm will be proportional to the number of nodes.
	 The  Big-O notation will be O(n).
	 Since it takes constant time to visit each node as it is visited only once.
	 By visiting the node we are reading the data in that node and inserting its children
	 in the Queue.
	 So irrespective of the shape or height of the tree it will still be constant time.





	
