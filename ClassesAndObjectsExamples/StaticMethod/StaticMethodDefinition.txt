Static methods and variables can be called directly without having to be instantiated like an instance method or variable.

Static Class Members (members includes variables and methods inside a class) 


Static methods:
Explanation:
A static class is basically the same as a non-static class, but there is one difference: a static class cannot be instantiated. In other words, you cannot use the new keyword to create a variable of the class type. Because there is no instance variable, you access the members of a static class by using the class name itself. For example, if you have a static class that is named UtilityClass that has a public method named Definition() inside square.cs and rectangle.cs in my example , you call the method as shown in the following example:

 Square.Definition();
 Rectangle.Definition();
 
 
 Static Variables:
 Explanation:
 When a variable is declared as static it is global for all instances of a class hence it keep track of the number of squares for each instantiation of the Square class 
 public static int numberOfSquares;
   
 It can be called outside the class as 
 Square.numberOfSquares
 
 