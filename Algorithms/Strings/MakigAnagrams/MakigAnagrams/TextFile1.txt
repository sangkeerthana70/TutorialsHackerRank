       // brute force solution
	   
	   static int makingAnagrams(string s1, string s2)
        {
            
            int misMatchCount = 0;

            for (int i = 0; i < s1.Length; i++)
            {
                bool match = false;
                Console.WriteLine("Outer loop : " + s1[i]);
                for (int j = 0; j < s2.Length; j++)
                {
                    Console.WriteLine("Inner loop : " + s2[j]);
                    if (s1[i] == s2[j])
                    {
                        Console.WriteLine("match");
                        match = true;
                        break;
                    }

                }
                if(!match)
                {
                    misMatchCount += 1;
                    Console.WriteLine("misMatchCount : " + misMatchCount);
                }



            }

            //compare string s2 with string s1
            for (int i = 0; i < s2.Length; i++)
            {
                Console.WriteLine("outer loop: " + s2[i]);
                bool match = false;
                for (int j = 0; j < s1.Length; j++)
                {
                    Console.WriteLine("Inner loop: " + s1[j]);
                    if (s2[i] == s1[j])
                    {
                        Console.WriteLine("match");
                        match = true;
                        break;
                    }
                }
                if (!match)
                {
                    Console.WriteLine("no match");
                    misMatchCount += 1;
                    Console.WriteLine("mismatchCount " + misMatchCount);
                }
            }
            Console.WriteLine("Mis match Letter Count: " + misMatchCount);
            return misMatchCount;
		}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Notes:

1)To make an anagram find the common characters in both the strings.
Get its frequency Eg:If 'a' has 9 occurances in the first string and 7 ocurrances in second
string. The difference of their key.value which is the frequency gives us the number of characters
to be deleted.
2) the above difference has to be added to the number of characters that is uncommon 
in both the strings.
3) add results in step 1 and step2.

++++++++++++++++++++working solution with console writelines for better understanding++++++++++++
      static int makingAnagrams(string s1, string s2)
        {
            int commonCharCount1 = 0;
            int commonCharCount2 = 0;
            int minDeletions = 0;
            Dictionary<char, int> strDict1 = new Dictionary<char, int>();

            for(int i = 0; i < s1.Length; i++)
            {
                if (strDict1.ContainsKey(s1[i]))
                {
                    strDict1[s1[i]]++;
                }
                else
                {
                    strDict1.Add(s1[i], 1);
                }
            }

            foreach(var item in strDict1)
            {
                Console.WriteLine("item in a: " + item);
            }
            Console.WriteLine();

            Dictionary<char, int> strDict2 = new Dictionary<char, int>();

            for(int i = 0; i < s2.Length; i++)
            {
                if (strDict2.ContainsKey(s2[i]))
                {
                    strDict2[s2[i]]++;
                }
                else
                {
                    strDict2.Add(s2[i], 1);
                }
            }
            foreach(var item in strDict2)
            {
                Console.WriteLine("item in b: " + item);
            }
            // find the uncommon chars in strDict1
            foreach(KeyValuePair<char, int> character in strDict1)
            {
                if(!strDict2.ContainsKey(character.Key))
                {
                    Console.WriteLine("uncommon char.Key in strDict1 " + character.Key + character.Value);
                    minDeletions += character.Value;
                    Console.WriteLine("minDeletions in strDict1: " + minDeletions);
                }               
            }
            // find the uncommon chars in strDict2
            foreach (KeyValuePair<char, int> character in strDict2)
            {
                if (!strDict1.ContainsKey(character.Key))
                {
                    Console.WriteLine("uncommon char.Key in strDict2 " + character.Key + character.Value);
                    minDeletions += character.Value;
                    Console.WriteLine("minDeletions in strDict2: " + minDeletions);
                }
            }
            // find the common chars between both dicts by getting the key's value
           foreach(KeyValuePair<char, int> character in strDict1)
           {
                Console.WriteLine("inside find common chars");
                if (strDict2.ContainsKey(character.Key))
                {
                    commonCharCount1 = strDict1[character.Key];
                    Console.WriteLine("common key of strDict1: " + character.Key +commonCharCount1);
                    commonCharCount2 = strDict2[character.Key];
                    Console.WriteLine("common key of strDict2: " + commonCharCount2);//returns the value of the key
                    Console.WriteLine("commonChar difference: " + Math.Abs(commonCharCount1 - commonCharCount2));
                    minDeletions = Math.Abs(commonCharCount1 - commonCharCount2) + minDeletions;
                    Console.WriteLine("minDeletions: " + minDeletions);
                    
                }
           }
            return minDeletions;
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++